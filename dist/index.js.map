{
  "version": 3,
  "sources": ["../lib/months.json", "../lib/days.json", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["{\n\t\"1\": 1,\n\t\"jan\": 1,\n\t\"january\": 1,\n\t\"2\": 2,\n\t\"feb\": 2,\n\t\"february\": 2,\n\t\"3\": 3,\n\t\"mar\": 3,\n\t\"march\": 3,\n\t\"4\": 4,\n\t\"apr\": 4,\n\t\"april\": 4,\n\t\"5\": 5,\n\t\"may\": 5,\n\t\"6\": 6,\n\t\"jun\": 6,\n\t\"june\": 6,\n\t\"7\": 7,\n\t\"jul\": 7,\n\t\"july\": 7,\n\t\"8\": 8,\n\t\"aug\": 8,\n\t\"august\": 8,\n\t\"9\": 9,\n\t\"sep\": 9,\n\t\"september\": 9,\n\t\"10\": 10,\n\t\"oct\": 10,\n\t\"october\": 10,\n\t\"11\": 11,\n\t\"nov\": 11,\n\t\"november\": 11,\n\t\"12\": 12,\n\t\"dec\": 12,\n\t\"december\": 12\n}\n", "[31,28,31,30,31,30,31,31,30,31,30,31]\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert-is-date-object' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar daysInMonth = require( '@stdlib/time-days-in-month' );\nvar isLeapYear = require( '@stdlib/assert-is-leap-year' );\nvar lowercase = require( '@stdlib/string-lowercase' );\nvar format = require( '@stdlib/string-format' );\nvar MONTHS = require( './months.json' );\nvar DAYS = require( './days.json' );\n\n\n// MAIN //\n\n/**\n* Returns the day of the year.\n*\n* @param {(string|integer|Date)} [month] - month (or Date)\n* @param {integer} [day] - day\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @throws {RangeError} second argument must be greater than `0` and less than or equal to the maximum number of days in a month\n* @throws {TypeError} third argument must be an integer\n* @returns {integer} day of the year\n*\n* @example\n* var day = dayOfYear();\n* // returns <number>\n*\n* @example\n* var day = dayOfYear( new Date() );\n* // returns <number>\n*\n* @example\n* var day = dayOfYear( 12, 31, 2017 );\n* // returns 365\n*\n* @example\n* var day = dayOfYear( 12, 31, 2016 );\n* // returns 366\n*/\nfunction dayOfYear( month, day, year ) {\n\tvar date;\n\tvar days;\n\tvar num;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tvar i;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\tdate = new Date();\n\t\tmon = date.getMonth() + 1; // zero-based\n\t\tyr = date.getFullYear();\n\t\td = date.getDate();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\tdate = month;\n\t\t\tmon = date.getMonth() + 1; // zero-based\n\t\t\tyr = date.getFullYear();\n\t\t\td = date.getDate();\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. If only providing a single argument, must provide a Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( day ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', day ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\td = day;\n\t\tyr = year;\n\t}\n\tdays = daysInMonth( mon, yr );\n\tif ( d < 1 || d > days ) {\n\t\tthrow new RangeError( format( 'invalid argument. Day number must be on the interval: [1, %u]. Value: `%d`.', days, d ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tmon = MONTHS[ mon ];\n\tnum = 0;\n\tfor ( i = 0; i < mon-1; i++ ) {\n\t\tnum += DAYS[ i ];\n\n\t\t// Check for February during a leap year...\n\t\tif ( i === 1 && isLeapYear( yr ) ) {\n\t\t\tnum += 1;\n\t\t}\n\t}\n\tnum += d;\n\treturn num;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dayOfYear;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the day of the year.\n*\n* @module @stdlib/time-day-of-year\n*\n* @example\n* var dayOfYear = require( '@stdlib/time-day-of-year' );\n*\n* var day = dayOfYear();\n* // returns <number>\n*\n* day = dayOfYear( new Date() );\n* // returns <number>\n*\n* day = dayOfYear( 12, 31, 2017 );\n* // returns 365\n*\n* day = dayOfYear( 12, 31, 2016 );\n* // returns 366\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,CAAAA,EAAA,SACC,IAAK,EACL,IAAO,EACP,QAAW,EACX,IAAK,EACL,IAAO,EACP,SAAY,EACZ,IAAK,EACL,IAAO,EACP,MAAS,EACT,IAAK,EACL,IAAO,EACP,MAAS,EACT,IAAK,EACL,IAAO,EACP,IAAK,EACL,IAAO,EACP,KAAQ,EACR,IAAK,EACL,IAAO,EACP,KAAQ,EACR,IAAK,EACL,IAAO,EACP,OAAU,EACV,IAAK,EACL,IAAO,EACP,UAAa,EACb,KAAM,GACN,IAAO,GACP,QAAW,GACX,KAAM,GACN,IAAO,GACP,SAAY,GACZ,KAAM,GACN,IAAO,GACP,SAAY,EACb,ICpCA,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,CAAAA,EAAA,SAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,ICApC,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAe,QAAS,+BAAgC,EACxDC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAY,QAAS,2BAA4B,EAAE,YACnDC,EAAc,QAAS,4BAA6B,EACpDC,EAAa,QAAS,6BAA8B,EACpDC,EAAY,QAAS,0BAA2B,EAChDC,EAAS,QAAS,uBAAwB,EAC1CC,EAAS,IACTC,EAAO,IAmCX,SAASC,EAAWC,EAAOC,EAAKC,EAAO,CACtC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,GAAK,UAAU,SAAW,EAEzBN,EAAO,IAAI,KACXG,EAAMH,EAAK,SAAS,EAAI,EACxBI,EAAKJ,EAAK,YAAY,EACtBK,EAAIL,EAAK,QAAQ,UACN,UAAU,SAAW,EAChC,GAAKb,EAAcU,CAAM,EACxBG,EAAOH,EACPM,EAAMH,EAAK,SAAS,EAAI,EACxBI,EAAKJ,EAAK,YAAY,EACtBK,EAAIL,EAAK,QAAQ,MAEjB,OAAM,IAAI,UAAWP,EAAQ,kGAAmGI,CAAM,CAAE,MAEnI,CACN,GAAK,CAACT,EAAUS,CAAM,GAAK,CAACR,EAAWQ,CAAM,EAC5C,MAAM,IAAI,UAAWJ,EAAQ,oFAAqFI,CAAM,CAAE,EAE3H,GAAK,CAACR,EAAWS,CAAI,EACpB,MAAM,IAAI,UAAWL,EAAQ,qEAAsEK,CAAI,CAAE,EAE1G,GAAK,CAACT,EAAWU,CAAK,EACrB,MAAM,IAAI,UAAWN,EAAQ,oEAAqEM,CAAK,CAAE,EAE1GI,EAAMN,EACNQ,EAAIP,EACJM,EAAKL,CACN,CAEA,GADAE,EAAOX,EAAaa,EAAKC,CAAG,EACvBC,EAAI,GAAKA,EAAIJ,EACjB,MAAM,IAAI,WAAYR,EAAQ,8EAA+EQ,EAAMI,CAAE,CAAE,EAKxH,IAHAF,EAAMX,EAAWW,EAAI,SAAS,CAAE,EAChCA,EAAMT,EAAQS,CAAI,EAClBD,EAAM,EACAI,EAAI,EAAGA,EAAIH,EAAI,EAAGG,IACvBJ,GAAOP,EAAMW,CAAE,EAGVA,IAAM,GAAKf,EAAYa,CAAG,IAC9BF,GAAO,GAGT,OAAAA,GAAOG,EACAH,CACR,CAKAhB,EAAO,QAAUU,ICjFjB,IAAIW,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_months", "__commonJSMin", "exports", "module", "require_days", "__commonJSMin", "exports", "module", "require_main", "__commonJSMin", "exports", "module", "isDateObject", "isString", "isInteger", "daysInMonth", "isLeapYear", "lowercase", "format", "MONTHS", "DAYS", "dayOfYear", "month", "day", "year", "date", "days", "num", "mon", "yr", "d", "i", "main"]
}
